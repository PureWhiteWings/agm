<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
    <TriggerPackage>
        <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
            <name>Mapper</name>
            <script></script>
            <triggerType>0</triggerType>
            <conditonLineDelta>3</conditonLineDelta>
            <mStayOpen>0</mStayOpen>
            <mCommand></mCommand>
            <packageName></packageName>
            <mFgColor>#ff0000</mFgColor>
            <mBgColor>#ffff00</mBgColor>
            <mSoundFile></mSoundFile>
            <colorTriggerFgColor>#000000</colorTriggerFgColor>
            <colorTriggerBgColor>#000000</colorTriggerBgColor>
            <regexCodeList/>
            <regexCodePropertyList/>
            <TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Markpoints</name>
                <script></script>
                <triggerType>0</triggerType>
                <conditonLineDelta>0</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList/>
                <regexCodePropertyList/>
                <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                    <name>Elor entrance</name>
                    <script>mapper.roomNumber = 1216
mapper.area = getRoomArea(mapper.roomNumber)
mapper.x, mapper.y, mapper.z = getRoomCoordinates(mapper.roomNumber)
centerview(mapper.roomNumber)</script>
                    <triggerType>0</triggerType>
                    <conditonLineDelta>2</conditonLineDelta>
                    <mStayOpen>0</mStayOpen>
                    <mCommand></mCommand>
                    <packageName></packageName>
                    <mFgColor>#ff0000</mFgColor>
                    <mBgColor>#ffff00</mBgColor>
                    <mSoundFile></mSoundFile>
                    <colorTriggerFgColor>#000000</colorTriggerFgColor>
                    <colorTriggerBgColor>#000000</colorTriggerBgColor>
                    <regexCodeList>
                        <string> Several man-sized stones stand</string>
                        <string> Several big ancient stones rise</string>
                        <string> Runes are inscribed</string>
                    </regexCodeList>
                    <regexCodePropertyList>
                        <integer>2</integer>
                        <integer>2</integer>
                        <integer>2</integer>
                    </regexCodePropertyList>
                </Trigger>
            </TriggerGroup>
            <Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
                <name>Moved</name>
                <script>------------------------------------------------------------------------
--     Process exit string for later, ready local tables for use      --
------------------------------------------------------------------------

local exitString = multimatches[3][2]                                       -- Exit list string, as provided by the game
local exitTable = string.split(exitString,&quot;, &quot;)                             -- Indexed table of exits
local exitStringClean = string.gsub(exitString,&quot;%[%w%]&quot;,&quot;&quot;)                 -- Exit list string, with [p] and [r] removed
local exitTableClean = string.split(exitStringClean,&quot;, &quot;)                   -- Indexed table of exits, with [p] and [r] removed
local makeNewRoom = false
local directionTraveled = string.trim(string.lower(multimatches[1][2]))     -- Store the direction that we travelled, for getting new room number
local directionTraveledAlt = directionTraveled                              -- Store room name, to be stripped of &quot;up&quot; and &quot;down&quot; if a cardinal/ordinal exit
if directionTraveled ~= &quot;up&quot; and directionTraveled ~= &quot;down&quot; then   -- If it is JUST &quot;up&quot; or &quot;down&quot;, don't take those out!
  directionTraveledAlt = string.gsub(directionTraveledAlt,&quot;up&quot;,&quot;&quot;)             -- Strip directionTraveledAlt of &quot;up&quot;
  directionTraveledAlt = string.gsub(directionTraveledAlt,&quot;down&quot;,&quot;&quot;)           -- Strip directionTraveledAlt of &quot;down&quot;
end

clearWindow(&quot;debugWindow&quot;)                                                  -- Clear the debug window





------------------------------------------------------------------------
--      Set up information about the previous and current rooms       --
------------------------------------------------------------------------

mapper.previousRoomExits  = getRoomExits(mapper.roomNumber)      -- Table of exits from the last room, for getting current room number

if mapper.roomNumber ~= -1 then                  -- If we knew the last room number, store info about the last room
  mapper.previousRoomNumber = mapper.roomNumber
  mapper.previousRoomName   = mapper.roomName
  mapper.previousArea       = mapper.area
else                                             -- If we didn't, store -1 and &quot;Unknown&quot; to indicate this
  mapper.previousRoomNumber = -1
  mapper.previousRoomName   = &quot;Unknown&quot;
  mapper.previousArea   = -1
end

mapper.roomNumber = -1                           -- Set current room number to -1, since we don't know it yet!
mapper.roomName = multimatches[2][2]             -- Store captured room name

if string.find(mapper.roomName,&quot;%.&quot;) then        -- Strip end period, just in case of a double-period error
  mapper.roomName = string.cut(mapper.roomName,string.find(mapper.roomName,&quot;%.&quot;)-1)
end





------------------------------------------------------------------------
--                   Search for room with this name                   --
------------------------------------------------------------------------

cecho(&quot;debugWindow&quot;,&quot;\n&lt;turquoise&gt;Moved &lt;white&gt;&quot;..directionTraveled..&quot;&lt;turquoise&gt;/&lt;white&gt;&quot;..directionTraveledAlt..&quot;&lt;turquoise&gt;.Searching for room by name...\n&quot;)
local roomSearchTable = searchRoom(mapper.roomName)      -- Search to see if there's only one known room with that name.
if table.size(roomSearchTable) == 1 and not mapper.autocreate then           -- If so, set our position to it.
  cecho(&quot;debugWindow&quot;,&quot;&lt;green&gt;Single room found! Setting position!\n&quot;)
  local tempRoomID = table.maxn(roomSearchTable)
  centerview(tempRoomID)
  mapper.roomNumber = tempRoomID
  mapper.area = getRoomArea(tempRoomID)
  mapper.x, mapper.y, mapper.z = getRoomCoordinates(mapper.roomNumber)
end





------------------------------------------------------------------------
--     Search for current room number from previous room's exits      --
------------------------------------------------------------------------

if mapper.previousRoomExits and mapper.roomNumber == -1 then
  --for k,v in pairs(mapper.previousRoomExits) do
  --  cecho(&quot;debugWindow&quot;,&quot;&lt;yellow&gt;Does &lt;white&gt;&quot;..k..&quot;&lt;yellow&gt; = &lt;white&gt;&quot;..directionTraveledAlt..&quot;&lt;yellow&gt;? &quot;)
  --  if k == directionTraveledAlt then
  --    cecho(&quot;debugWindow&quot;,&quot;&lt;green&gt;Yes!\nExit to this room found! Setting position!\n&quot;)
  --    mapper.roomNumber = v
  --    centerview(mapper.roomNumber)
  --    mapper.area = getRoomArea(mapper.roomNumber)
  --    mapper.x, mapper.y, mapper.z = getRoomCoordinates(mapper.roomNumber)
  --    break
  --  else
  --    cecho(&quot;debugWindow&quot;,&quot;&lt;red&gt;No.\n&quot;)
  --  end
  --end
  cecho(&quot;debugWindow&quot;,&quot;&lt;yellow&gt;Room name not unique or not found!\n&lt;turquoise&gt;Searching previous room for a &lt;white&gt;&quot;..directionTraveledAlt..&quot; &lt;turquoise&gt;exit...\n&quot;)
  if mapper.previousRoomExits[directionTraveledAlt] then
    cecho(&quot;debugWindow&quot;,&quot;&lt;green&gt;Exit to this room found! Setting position!\n&quot;)
    mapper.roomNumber = mapper.previousRoomExits[directionTraveledAlt]
    centerview(mapper.roomNumber)
    mapper.area = getRoomArea(mapper.roomNumber)
    mapper.x, mapper.y, mapper.z = getRoomCoordinates(mapper.roomNumber)
  end
end





------------------------------------------------------------------------
--     Search for room by coordinates if number not by room name      --
------------------------------------------------------------------------

if mapper.roomNumber == -1 then
  cecho(&quot;debugWindow&quot;,&quot;&lt;yellow&gt;No valid exit found in previous room! Adjusting our coordinates and checking the map...\n&quot;)
  mapper.x, mapper.y, mapper.z = adjustMapperCoordinates(mapper.x, mapper.y, mapper.z, directionTraveled)
  local searchTable = getRoomsByPosition(mapper.area,mapper.x,mapper.y,mapper.z)
  if table.size(searchTable) &gt; 0 then
    cecho(&quot;debugWindow&quot;,&quot;&lt;green&gt;Room found at these coordinates! Setting position!\n&quot;)
    mapper.roomNumber = searchTable[0]
    mapper.area = getRoomArea(mapper.roomNumber)
    centerview(mapper.roomNumber)
  else
    cecho(&quot;debugWindow&quot;,&quot;&lt;yellow&gt;Room not found at these coordinates, checking if automapper enabled...\n&quot;)
  end
end





------------------------------------------------------------------------
--      Room number never found, make new one or mark us as lost      --
------------------------------------------------------------------------

if mapper.roomNumber == -1 then
  if mapper.autocreate then
    cecho(&quot;debugWindow&quot;,&quot;&lt;green&gt;Automapper enabled! Making new room...\n&quot;)
    echo(&quot;\nMaking new room: &quot;..mapper.previousArea..&quot;, &quot;..mapper.x..&quot;, &quot;..mapper.y..&quot;, &quot;..mapper.z)
    makeNewRoom = true
  else
    cecho(&quot;debugWindow&quot;,&quot;&lt;red&gt;Room not found, and not making new one! We're lost! D:&quot;)
  end
end





------------------------------------------------------------------------
--           Generate mapper.roomExits from known exit info           --
------------------------------------------------------------------------

mapper.roomExits = {}                                       -- Clear the exit list entirely
local knownRoomExits = getRoomExits(mapper.roomNumber)

  for k,v in ipairs(exitTableClean) do    -- Generate list of exits in mapper.roomExits from exitTableClean

    if v == &quot;n&quot; then                                                                -- v is a short exit name, checking if v is &quot;n&quot;
      mapper.roomExits[#mapper.roomExits+1] = {}                                    -- v is &quot;n&quot;, so make a new subtable entry in mapper.roomExits
      local lastExit = #mapper.roomExits                                            -- lastExit holds the index of the latest entry in mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;north&quot;                                     -- Store the long name of the exit
      mapper.roomExits[lastExit].short = &quot;n&quot;                                        -- Store the short name of the exit
      mapper.roomExits[lastExit].altLong = &quot;north&quot;                                  -- Store the long altname - long exit name with &quot;up&quot; or &quot;down&quot; stripped out.
      mapper.roomExits[lastExit].altShort = &quot;n&quot;                                     -- Store the short altname - short exit name with &quot;up&quot; or &quot;down&quot; stripped out.
      if knownRoomExits then
        if knownRoomExits[&quot;north&quot;] then                                               -- If there is a known room exit to the north...
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;north&quot;]           -- Mark this exit as going to that room number...
        end                                                                           -- And then move on
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then    -- Checking for &quot;[p]&quot; or &quot;[r]&quot; in equivalent exitTable entry...
        mapper.roomExits[lastExit].road = true                                      -- If either found, mark this exit as a road
      else                                                                          -- But if we don't find either string...
        mapper.roomExits[lastExit].road = false                                     -- Mark this exit as not being on a road
      end                                                                           -- Done with this ipair, let's start over on the next k

    elseif v == &quot;nu&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;northup&quot;
      mapper.roomExits[lastExit].short = &quot;nu&quot;
      mapper.roomExits[lastExit].altLong = &quot;north&quot;
      mapper.roomExits[lastExit].altShort = &quot;n&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;north&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;north&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;nd&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;northdown&quot;
      mapper.roomExits[lastExit].short = &quot;nd&quot;
      mapper.roomExits[lastExit].altLong = &quot;north&quot;
      mapper.roomExits[lastExit].altShort = &quot;n&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;north&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;north&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;ne&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;northeast&quot;
      mapper.roomExits[lastExit].short = &quot;ne&quot;
      mapper.roomExits[lastExit].altLong = &quot;northeast&quot;
      mapper.roomExits[lastExit].altShort = &quot;ne&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;northeast&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;northeast&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;neu&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;northeastup&quot;
      mapper.roomExits[lastExit].short = &quot;neu&quot;
      mapper.roomExits[lastExit].altLong = &quot;northeast&quot;
      mapper.roomExits[lastExit].altShort = &quot;ne&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;northeast&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;northeast&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;ned&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;northeastdown&quot;
      mapper.roomExits[lastExit].short = &quot;ned&quot;
      mapper.roomExits[lastExit].altLong = &quot;northeast&quot;
      mapper.roomExits[lastExit].altShort = &quot;ne&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;northeast&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;northeast&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;e&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;east&quot;
      mapper.roomExits[lastExit].short = &quot;e&quot;
      mapper.roomExits[lastExit].altLong = &quot;east&quot;
      mapper.roomExits[lastExit].altShort = &quot;e&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;east&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;east&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;eu&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;eastup&quot;
      mapper.roomExits[lastExit].short = &quot;eu&quot;
      mapper.roomExits[lastExit].altLong = &quot;east&quot;
      mapper.roomExits[lastExit].altShort = &quot;e&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;east&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;east&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;ed&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;eastdown&quot;
      mapper.roomExits[lastExit].short = &quot;ed&quot;
      mapper.roomExits[lastExit].altLong = &quot;east&quot;
      mapper.roomExits[lastExit].altShort = &quot;e&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;east&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;east&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;se&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;southeast&quot;
      mapper.roomExits[lastExit].short = &quot;se&quot;
      mapper.roomExits[lastExit].altLong = &quot;southeast&quot;
      mapper.roomExits[lastExit].altShort = &quot;se&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;southast&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;southast&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;seu&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;southeastup&quot;
      mapper.roomExits[lastExit].short = &quot;seu&quot;
      mapper.roomExits[lastExit].altLong = &quot;southeast&quot;
      mapper.roomExits[lastExit].altShort = &quot;se&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;southast&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;southast&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;sed&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;southeastdown&quot;
      mapper.roomExits[lastExit].short = &quot;sed&quot;
      mapper.roomExits[lastExit].altLong = &quot;southeast&quot;
      mapper.roomExits[lastExit].altShort = &quot;se&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;southast&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;southast&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;s&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;south&quot;
      mapper.roomExits[lastExit].short = &quot;s&quot;
      mapper.roomExits[lastExit].altLong = &quot;south&quot;
      mapper.roomExits[lastExit].altShort = &quot;s&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;south&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;south&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;su&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;southup&quot;
      mapper.roomExits[lastExit].short = &quot;su&quot;
      mapper.roomExits[lastExit].altLong = &quot;south&quot;
      mapper.roomExits[lastExit].altShort = &quot;s&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;south&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;south&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;sd&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;southdown&quot;
      mapper.roomExits[lastExit].short = &quot;sd&quot;
      mapper.roomExits[lastExit].altLong = &quot;south&quot;
      mapper.roomExits[lastExit].altShort = &quot;s&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;south&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;south&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;sw&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;southwest&quot;
      mapper.roomExits[lastExit].short = &quot;sw&quot;
      mapper.roomExits[lastExit].altLong = &quot;southwest&quot;
      mapper.roomExits[lastExit].altShort = &quot;sw&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;southwest&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;southwest&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;swu&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;southwestup&quot;
      mapper.roomExits[lastExit].short = &quot;swu&quot;
      mapper.roomExits[lastExit].altLong = &quot;southwest&quot;
      mapper.roomExits[lastExit].altShort = &quot;sw&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;southwest&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;southwest&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;swd&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;southwestdown&quot;
      mapper.roomExits[lastExit].short = &quot;swd&quot;
      mapper.roomExits[lastExit].altLong = &quot;southwest&quot;
      mapper.roomExits[lastExit].altShort = &quot;sw&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;southwest&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;southwest&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;w&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;west&quot;
      mapper.roomExits[lastExit].short = &quot;w&quot;
      mapper.roomExits[lastExit].altLong = &quot;west&quot;
      mapper.roomExits[lastExit].altShort = &quot;w&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;west&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;west&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;wu&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;westup&quot;
      mapper.roomExits[lastExit].short = &quot;wu&quot;
      mapper.roomExits[lastExit].altLong = &quot;west&quot;
      mapper.roomExits[lastExit].altShort = &quot;w&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;west&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;west&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;wd&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;westdown&quot;
      mapper.roomExits[lastExit].short = &quot;wd&quot;
      mapper.roomExits[lastExit].altLong = &quot;west&quot;
      mapper.roomExits[lastExit].altShort = &quot;w&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;west&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;west&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;nw&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;northwest&quot;
      mapper.roomExits[lastExit].short = &quot;nw&quot;
      mapper.roomExits[lastExit].altLong = &quot;northwest&quot;
      mapper.roomExits[lastExit].altShort = &quot;nw&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;northwest&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;northwest&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;nwu&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;northwestup&quot;
      mapper.roomExits[lastExit].short = &quot;nwu&quot;
      mapper.roomExits[lastExit].altLong = &quot;northwest&quot;
      mapper.roomExits[lastExit].altShort = &quot;nw&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;northwest&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;northwest&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;nwd&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;northwestdown&quot;
      mapper.roomExits[lastExit].short = &quot;nwd&quot;
      mapper.roomExits[lastExit].altLong = &quot;northwest&quot;
      mapper.roomExits[lastExit].altShort = &quot;nw&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;northwest&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;northwest&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;u&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;up&quot;
      mapper.roomExits[lastExit].short = &quot;u&quot;
      mapper.roomExits[lastExit].altLong = &quot;up&quot;
      mapper.roomExits[lastExit].altShort = &quot;u&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;up&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;up&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;d&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;down&quot;
      mapper.roomExits[lastExit].short = &quot;d&quot;
      mapper.roomExits[lastExit].altLong = &quot;down&quot;
      mapper.roomExits[lastExit].altShort = &quot;d&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;down&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;down&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;in&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;in&quot;
      mapper.roomExits[lastExit].short = &quot;in&quot;
      mapper.roomExits[lastExit].altLong = &quot;in&quot;
      mapper.roomExits[lastExit].altShort = &quot;in&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;in&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;in&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    elseif v == &quot;out&quot; then
      mapper.roomExits[#mapper.roomExits+1] = {}
      local lastExit = #mapper.roomExits
      mapper.roomExits[lastExit].long = &quot;out&quot;
      mapper.roomExits[lastExit].short = &quot;out&quot;
      mapper.roomExits[lastExit].altLong = &quot;out&quot;
      mapper.roomExits[lastExit].altShort = &quot;out&quot;
      if knownRoomExits then
        if knownRoomExits[&quot;out&quot;] then
          mapper.roomExits[lastExit].toRoomNumber = knownRoomExits[&quot;out&quot;]
        end
      end
      if string.find(exitTable[k],&quot;[r]&quot;) or string.find(exitTable[k],&quot;[p]&quot;) then
        mapper.roomExits[lastExit].road = true
      else
        mapper.roomExits[lastExit].road = false
      end

    end

  end






------------------------------------------------------------------------
--             Use the UI compass to show road directions             --
------------------------------------------------------------------------
compass.n:hide()       -- Hide all the compass points
compass.ne:hide()
compass.e:hide()
compass.se:hide()
compass.s:hide()
compass.sw:hide()
compass.w:hide()
compass.nw:hide()

for k,v in ipairs(mapper.roomExits) do                                    -- Process each exit in mapper.roomExits
  if v.road then                                                          -- Check if exit k is a road
    if v.short == &quot;n&quot; or v.short == &quot;nu&quot; or v.short == &quot;nd&quot; then          -- Check if exit k has &quot;n&quot; as a short exitname
      compass.n:show()
    elseif v.short == &quot;ne&quot; or v.short == &quot;neu&quot; or v.short == &quot;ned&quot; then
      compass.ne:show()
    elseif v.short == &quot;e&quot; or v.short == &quot;eu&quot; or v.short == &quot;ed&quot; then
      compass.e:show()
    elseif v.short == &quot;se&quot; or v.short == &quot;seu&quot; or v.short == &quot;sed&quot; then
      compass.se:show()
    elseif v.short == &quot;s&quot; or v.short == &quot;su&quot; or v.short == &quot;sd&quot; then
      compass.s:show()
    elseif v.short == &quot;sw&quot; or v.short == &quot;swu&quot; or v.short == &quot;swd&quot; then
      compass.sw:show()
    elseif v.short == &quot;w&quot; or v.short == &quot;wu&quot; or v.short == &quot;wd&quot; then
      compass.w:show()
    elseif v.short == &quot;nw&quot; or v.short == &quot;nwu&quot; or v.short == &quot;nwd&quot; then
      compass.nw:show()
    end
  end
end





------------------------------------------------------------------------
--                       Automapping extra bits                       --
------------------------------------------------------------------------

if mapper.autocreate then                               -- Set room colour by environment
  if makeNewRoom then                                   -- Was the flag set to make a new room?
    local createdRoom = jmaproom(mapper.previousArea, mapper.x, mapper.y, mapper.z)
    mapper.roomNumber = createdRoom
    mapper.area = getRoomArea(createdRoom)
  end
  local loweredName = string.lower(mapper.roomName)     -- This guesses environment by room name - NOT ALWAYS ACCURATE
  if string.find(multimatches[3][1],&quot;%[r%]&quot;) or string.find(multimatches[3][1],&quot;%[p%]&quot;) then
    setRoomEnv(mapper.roomNumber,262)                   -- Dark cyan for roads and paths, always
  elseif string.find(loweredName,&quot;meadow&quot;) then
    setRoomEnv(mapper.roomNumber,266)                   -- Light green for grasses and meadows
  elseif string.find(loweredName,&quot;forest&quot;) then
    setRoomEnv(mapper.roomNumber,258)                   -- Dark green for forests
  elseif string.find(loweredName,&quot;sand&quot;) or string.find(loweredName,&quot;beach&quot;) or string.find(loweredName,&quot;coastline&quot;) then
    setRoomEnv(mapper.roomNumber,267)                   -- Bright yellow for beaches
  elseif string.find(loweredName,&quot;tundra&quot;) then
    setRoomEnv(mapper.roomNumber,259)                   -- Dark yellow for tundra
  elseif string.find(loweredName,&quot;tunnel&quot;) then
    setRoomEnv(mapper.roomNumber,272)                   -- Dark grey for tunnels
  elseif string.find(loweredName,&quot;arctic&quot;) then
    setRoomEnv(mapper.roomNumber,271)                   -- White for arctic
  end
end

if mapper.autoexits then                                -- Automatically connect exit stubs to nearby stubs
  local stubs = getExitStubs(mapper.roomNumber)         -- This is NOT always reliable, best not to do it next to unknown rooms
  if stubs then
    for i,v in pairs(stubs) do
      connectExitStub(mapper.roomNumber, v)
    end
  end
end

displayCoords()</script>
                <triggerType>0</triggerType>
                <conditonLineDelta>8</conditonLineDelta>
                <mStayOpen>0</mStayOpen>
                <mCommand></mCommand>
                <packageName></packageName>
                <mFgColor>#ff0000</mFgColor>
                <mBgColor>#ffff00</mBgColor>
                <mSoundFile></mSoundFile>
                <colorTriggerFgColor>#000000</colorTriggerFgColor>
                <colorTriggerBgColor>#000000</colorTriggerBgColor>
                <regexCodeList>
                    <string>^You travel a .+ distance (\w+)</string>
                    <string>^(?!It's|You travel|A closed wooden|An open wooden|You are)(.*)\.$</string>
                    <string>^Exit(?:s\(\d+\))?:\s+([^.]+?)\.?$</string>
                </regexCodeList>
                <regexCodePropertyList>
                    <integer>1</integer>
                    <integer>1</integer>
                    <integer>1</integer>
                </regexCodePropertyList>
            </Trigger>
        </TriggerGroup>
    </TriggerPackage>
    <TimerPackage/>
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>Mapper</name>
            <script></script>
            <command></command>
            <packageName></packageName>
            <regex></regex>
            <Alias isActive="yes" isFolder="no">
                <name>Add area</name>
                <script>local newId, err = addAreaName(matches[2])
 
if newId == nil or newId &lt; 1 or err then
  echo(&quot;That area name could not be added - error is: &quot;.. err..&quot;\n\n&quot;)
else
  cecho(&quot;&lt;green&gt;Created new area with the ID of &quot;..newId..&quot;.\n\n&quot;)
end</script>
                <command></command>
                <packageName></packageName>
                <regex>^addarea\s+(\w.+?)\s*$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Add room</name>
                <script>jmaproom(matches[2],matches[3],matches[4],matches[5])</script>
                <command></command>
                <packageName></packageName>
                <regex>^addroom\s+(\d+)\s+(\S+),(\S+),(\S+)\s*$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Automap toggle</name>
                <script>if not mapper.autocreate then
  mapper.autocreate = true
  echo(&quot;AUTO-MAPPER ON\n\n&quot;)
else
  mapper.autocreate = false
  echo(&quot;AUTO-MAPPER OFF\n\n&quot;)
end</script>
                <command></command>
                <packageName></packageName>
                <regex>^amap$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Autoexit toggle</name>
                <script>if not mapper.autoexits then
  mapper.autoexits = true
  echo(&quot;AUTO-EXITS ON\n\n&quot;)
else
  mapper.autoexits = false
  echo(&quot;AUTO-EXITS OFF\n\n&quot;)
end</script>
                <command></command>
                <packageName></packageName>
                <regex>^aexits$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Setpos</name>
                <script>setMapPosition(tonumber(matches[2]))</script>
                <command></command>
                <packageName></packageName>
                <regex>^setpos\s+(\d+)$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Connect stubs</name>
                <script>local stubs = getExitStubs(mapper.roomNumber)
if stubs then
  for i,v in pairs(stubs) do
    connectExitStub(mapper.roomNumber, v)
  end
end

centerview(mapper.roomNumber)</script>
                <command></command>
                <packageName></packageName>
                <regex>^mapstubs$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Connect all stubs in area</name>
                <script>local roomList = getAreaRooms(mapper.area)

for k,v in ipairs(roomList) do
  local roomNumber = v
  local stubs = getExitStubs(roomNumber)
  if stubs then
    for i,dir in pairs(stubs) do
      connectExitStub(roomNumber, dir)
    end
  end
end

centerview(mapper.roomNumber)</script>
                <command></command>
                <packageName></packageName>
                <regex>^mapallstubs$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Connect room</name>
                <script>local direction  = string.lower(matches[2])
--local inverseDirection = invertDirectionShort(direction)
local currentRoomNumber = mapper.roomNumber
--local targetRoomNumber = tonumber(matches[3])

--setExitStub(currentRoomNumber, direction, false)
--setExitStub(targetRoomNumber, inverseDirection, false)

--if not setExit(currentRoomNumber,targetRoomNumber,direction) then
--  cecho(&quot;&lt;orange&gt;Error setting exit from &quot;..currentRoomNumber..&quot; &quot;..direction..&quot; to &quot;..targetRoomNumber..&quot;.\n\n&quot;)
--else
--  cecho(&quot;&lt;green&gt;Created exit from &quot;..currentRoomNumber..&quot; &quot;..direction..&quot; to &quot;..targetRoomNumber..&quot;.\n\n&quot;)
--end

--if not setExit(targetRoomNumber,currentRoomNumber,invertDirectionLong(direction)) then
--  cecho(&quot;&lt;orange&gt;Error setting exit from &quot;..targetRoomNumber..&quot; &quot;..inverseDirection..&quot; to &quot;..currentRoomNumber..&quot;.\n\n&quot;)
--else
--  cecho(&quot;&lt;green&gt;Created exit from &quot;..targetRoomNumber..&quot; &quot;..inverseDirection..&quot; to &quot;..currentRoomNumber..&quot;.\n\n&quot;)
--end

connectExitStub(currentRoomNumber,direction)

centerview(currentRoomNumber)</script>
                <command></command>
                <packageName></packageName>
                <regex>^mapstub\s+(\w+)\s*$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Custom exit</name>
                <script>local fromRoomNumber = tonumber(matches[2])
local toRoomNumber   = tonumber(matches[3])
local exitDirection  = string.lower(matches[4])
--local lineType       = string.lower(matches[5])
local lineRed        = tonumber(matches[5])
local lineGreen      = tonumber(matches[6])
local lineBlue       = tonumber(matches[7])
local lineArrow      = tobool(matches[8])

fromX, fromY, fromZ = getRoomCoordinates(fromRoomNumber)
toX, toY, toZ = getRoomCoordinates(toRoomNumber)

exitLinePoints = {}
exitLinePoints[0] = {}
exitLinePoints[1] = {}
table.insert(exitLinePoints[0],fromX)
table.insert(exitLinePoints[0],fromY)
table.insert(exitLinePoints[0],fromZ)
table.insert(exitLinePoints[1],toX)
table.insert(exitLinePoints[1],toY)
table.insert(exitLinePoints[1],toZ)

local lineColour   = {}
lineColour[0] = lineRed
lineColour[1] = lineGreen
lineColour[2] = lineBlue

--addSpecialExit(fromRoomNumber, toRoomNumber, exitDirection)
addCustomLine(fromRoomNumber, exitLinePoints, exitDirection, &quot;dash line&quot;, lineColour, lineArrow)

centerview(mapper.roomNumber)</script>
                <command></command>
                <packageName></packageName>
                <regex>^ce\s+(\d+)\s+(\d+)\s+(\w+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\w+?)\s*$</regex>
            </Alias>
        </AliasGroup>
    </AliasPackage>
    <ActionPackage/>
    <ScriptPackage>
        <ScriptGroup isActive="yes" isFolder="yes">
            <name>Mapper</name>
            <packageName></packageName>
            <script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
            <eventHandlerList/>
            <Script isActive="yes" isFolder="no">
                <name>Mapper</name>
                <packageName></packageName>
                <script>mudlet = mudlet or {}
mudlet.mapper_script = true

mapper = mapper or {}
room = room or {}

---------------------------------------------------------------

exitmap = {
  [&quot;n&quot;] = 1,
  [&quot;north&quot;] = 1,
  [&quot;ne&quot;] = 2,
  [&quot;northeast&quot;] = 2,
  [&quot;nw&quot;] = 3,
  [&quot;northwest&quot;] = 3,
  [&quot;e&quot;] = 4,
  [&quot;east&quot;] = 4,
  [&quot;w&quot;] = 5,
  [&quot;west&quot;] = 5,
  [&quot;s&quot;] = 6,
  [&quot;south&quot;] = 6,
  [&quot;se&quot;] = 7,
  [&quot;southeast&quot;] = 7,
  [&quot;sw&quot;] = 8,
  [&quot;southwest&quot;] = 8,
  [&quot;u&quot;] = 9,
  [&quot;up&quot;] = 9,
  [&quot;d&quot;] = 10,
  [&quot;down&quot;] = 10,
  [&quot;in&quot;] = 11,
  [&quot;out&quot;] = 12,
  [&quot;northup&quot;] = 13,
  [&quot;nu&quot;] = 13,
  [&quot;northdown&quot;] = 14,
  [&quot;nd&quot;] = 14,
  [&quot;northeastup&quot;] = 15,
  [&quot;neu&quot;] = 15,
  [&quot;northeastdown&quot;] = 16,
  [&quot;ned&quot;] = 16,
  [&quot;eastup&quot;] = 17,
  [&quot;eu&quot;] = 17,
  [&quot;eastdown&quot;] = 18,
  [&quot;ed&quot;] = 18,
  [&quot;southeastup&quot;] = 19,
  [&quot;seu&quot;] = 19,
  [&quot;southeastdown&quot;] = 20,
  [&quot;sed&quot;] = 20,
  [&quot;southup&quot;] = 21,
  [&quot;su&quot;] = 21,
  [&quot;southdown&quot;] = 22,
  [&quot;sd&quot;] = 22,
  [&quot;southwestup&quot;] = 23,
  [&quot;swu&quot;] = 23,
  [&quot;southwestdown&quot;] = 24,
  [&quot;swd&quot;] = 24,
  [&quot;westup&quot;] = 25,
  [&quot;wu&quot;] = 25,
  [&quot;westdown&quot;] = 26,
  [&quot;wd&quot;] = 26,
  [&quot;northtwestup&quot;] = 27,
  [&quot;nwu&quot;] = 27,
  [&quot;northwestdown&quot;] = 28,
  [&quot;nwd&quot;] = 28,
  [1] = &quot;north&quot;,
  [2] = &quot;northeast&quot;,
  [3] = &quot;northwest&quot;,
  [4] = &quot;east&quot;,
  [5] = &quot;west&quot;,
  [6] = &quot;south&quot;,
  [7] = &quot;southeast&quot;,
  [8] = &quot;southwest&quot;,
  [9] = &quot;up&quot;,
  [10] = &quot;down&quot;,
  [11] = &quot;in&quot;,
  [12] = &quot;out&quot;,
  [13] = &quot;northup&quot;,
  [14] = &quot;northdown&quot;,
  [15] = &quot;northeastup&quot;,
  [16] = &quot;northeastdown&quot;,
  [17] = &quot;eastup&quot;,
  [18] = &quot;eastdown&quot;,
  [19] = &quot;southeastup&quot;,
  [20] = &quot;southeastdown&quot;,
  [21] = &quot;southup&quot;,
  [22] = &quot;southdown&quot;,
  [23] = &quot;southwestup&quot;,
  [24] = &quot;southwestdown&quot;,
  [25] = &quot;westup&quot;,
  [26] = &quot;westdown&quot;,
  [27] = &quot;northtwestup&quot;,
  [28] = &quot;northwestdown&quot;,
}</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>jSaveMap</name>
                <packageName></packageName>
                <script>function jSaveMap()

  local savedok = saveMap(getMudletHomeDir()..&quot;/jayden_geas_map.dat&quot;)
  if not savedok then
    echo(&quot;Save error - jSaveMap()\n\n&quot;)
  end

end</script>
                <eventHandlerList>
                    <string>sysExitEvent</string>
                </eventHandlerList>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>adjustMapperCoordinates</name>
                <packageName></packageName>
                <script>  function adjustMapperCoordinates(inputx, inputy, inputz, inputDirection)

  local outputx = inputx
  local outputy = inputy
  local outputz = inputz

  if inputDirection == &quot;n&quot; or inputDirection == &quot;north&quot; then
    outputy = outputy + 1
  elseif inputDirection == &quot;ne&quot; or inputDirection == &quot;northeast&quot; then
    outputx = outputx + 1
    outputy = outputy + 1
  elseif inputDirection == &quot;e&quot; or inputDirection == &quot;east&quot; then
    outputx = outputx + 1
  elseif inputDirection == &quot;se&quot; or inputDirection == &quot;southeast&quot; then
    outputx = outputx + 1
    outputy = outputy - 1
  elseif inputDirection == &quot;s&quot; or inputDirection == &quot;south&quot; then
    outputy = outputy - 1
  elseif inputDirection == &quot;sw&quot; or inputDirection == &quot;southwest&quot; then
    outputx = outputx - 1
    outputy = outputy - 1
  elseif inputDirection == &quot;w&quot; or inputDirection == &quot;west&quot; then
    outputx = outputx - 1
  elseif inputDirection == &quot;nw&quot; or inputDirection == &quot;northwest&quot; then
    outputx = outputx - 1
    outputy = outputy + 1
  elseif inputDirection == &quot;u&quot; or inputDirection == &quot;up&quot; then
    outputz = outputz + 1
  elseif inputDirection == &quot;d&quot; or inputDirection == &quot;down&quot; then
    outputz = outputz - 1
  elseif inputDirection == &quot;n&quot; or inputDirection == &quot;north&quot; then
    outputy = outputy + 1
  elseif inputDirection == &quot;nu&quot; or inputDirection == &quot;northup&quot; then
    --outputz = outputz + 1
    outputy = outputy + 1
  elseif inputDirection == &quot;nd&quot; or inputDirection == &quot;northdown&quot; then
    --outputz = outputz - 1
    outputy = outputy + 1
  elseif inputDirection == &quot;ne&quot; or inputDirection == &quot;northeast&quot; then
    outputx = outputx + 1
    outputy = outputy + 1
  elseif inputDirection == &quot;neu&quot; or inputDirection == &quot;northeastup&quot; then
    --outputz = outputz + 1
    outputx = outputx + 1
    outputy = outputy + 1
  elseif inputDirection == &quot;ned&quot; or inputDirection == &quot;northeastdown&quot; then
    --outputz = outputz - 1
    outputx = outputx + 1
    outputy = outputy + 1
  elseif inputDirection == &quot;e&quot; or inputDirection == &quot;east&quot; then
    outputx = outputx + 1
  elseif inputDirection == &quot;eu&quot; or inputDirection == &quot;eastup&quot; then
    --outputz = outputz + 1
    outputx = outputx + 1
  elseif inputDirection == &quot;ed&quot; or inputDirection == &quot;eastdown&quot; then
    --outputz = outputz - 1
    outputx = outputx + 1
  elseif inputDirection == &quot;se&quot; or inputDirection == &quot;southeast&quot; then      
    outputx = outputx + 1
    outputy = outputy - 1
  elseif inputDirection == &quot;seu&quot; or inputDirection == &quot;southeastup&quot; then
    --outputz = outputz + 1
    outputx = outputx + 1
    outputy = outputy - 1
  elseif inputDirection == &quot;sed&quot; or inputDirection == &quot;southeastdown&quot; then
    --outputz = outputz - 1
    outputx = outputx + 1
    outputy = outputy - 1
  elseif inputDirection == &quot;s&quot; or inputDirection == &quot;south&quot; then
    outputy = outputy - 1
  elseif inputDirection == &quot;su&quot; or inputDirection == &quot;southup&quot; then
    --outputz = outputz + 1
    outputy = outputy - 1
  elseif inputDirection == &quot;sd&quot; or inputDirection == &quot;southdown&quot; then
    --outputz = outputz - 1
    outputy = outputy - 1
  elseif inputDirection == &quot;sw&quot; or inputDirection == &quot;southwest&quot; then
    outputx = outputx - 1
    outputy = outputy - 1
  elseif inputDirection == &quot;swu&quot; or inputDirection == &quot;southwestup&quot; then
    --outputz = outputz + 1
    outputx = outputx - 1
    outputy = outputy - 1
  elseif inputDirection == &quot;swd&quot; or inputDirection == &quot;southwestdown&quot; then
    --outputz = outputz - 1
    outputx = outputx - 1
    outputy = outputy - 1
  elseif inputDirection == &quot;w&quot; or inputDirection == &quot;west&quot; then
    outputx = outputx - 1
  elseif inputDirection == &quot;wu&quot; or inputDirection == &quot;westup&quot; then
    --outputz = outputz + 1
    outputx = outputx - 1
  elseif inputDirection == &quot;wd&quot; or inputDirection == &quot;westdown&quot; then
    --outputz = outputz - 1
    outputx = outputx - 1
  elseif inputDirection == &quot;nw&quot; or inputDirection == &quot;northwest&quot; then
    outputx = outputx - 1
    outputy = outputy + 1
  elseif inputDirection == &quot;nwu&quot; or inputDirection == &quot;northwestup&quot; then
    --outputz = outputz + 1
    outputx = outputx - 1
    outputy = outputy + 1
  elseif inputDirection == &quot;nwd&quot; or inputDirection == &quot;northwestdown&quot; then
    --outputz = outputz - 1
    outputx = outputx - 1
    outputy = outputy + 1
  end

  return outputx, outputy, outputz

end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>jmaproom</name>
                <packageName></packageName>
                <script>function jmaproom(roomArea, roomX, roomY, roomZ)

  local area = tonumber(matches[2])
  local x = tonumber(matches[3])
  local y = tonumber(matches[4])
  local z = tonumber(matches[5])
  local newRoomNumber = createRoomID()
  local validExits = {&quot;n&quot;,&quot;ne&quot;,&quot;e&quot;,&quot;se&quot;,&quot;s&quot;,&quot;sw&quot;,&quot;w&quot;,&quot;nw&quot;,&quot;in&quot;,&quot;out&quot;,&quot;u&quot;,&quot;d&quot;}
  local comboExits = {&quot;nu&quot;, &quot;nd&quot;, &quot;neu&quot;, &quot;ned&quot;, &quot;eu&quot;, &quot;ed&quot;, &quot;seu&quot;, &quot;sed&quot;, &quot;su&quot;, &quot;sd&quot;, &quot;swu&quot;, &quot;swd&quot;, &quot;wu&quot;, &quot;wd&quot;, &quot;nwu&quot;, &quot;nwd&quot;}

  if mapper.roomName then
   if addRoom(newRoomNumber) == true then

      for k,v in ipairs(mapper.roomExits) do
        if table.contains(validExits,v.altShort) then
          setExitStub(newRoomNumber, v.altShort, true)
        end
      end

      setRoomCoordinates(newRoomNumber, roomX, roomY, roomZ) 
      setRoomArea(newRoomNumber,roomArea)
      setRoomName(newRoomNumber,mapper.roomName)
      mapper.x = roomX
      mapper.y = roomY
      mapper.z = roomZ
      mapper.area = roomArea
      centerview(newRoomNumber)

      return newRoomNumber

    else

      cecho(&quot;&lt;orange&gt;Error!\n\n&quot;)

    end
  end

end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>invertDirectionLong</name>
                <packageName></packageName>
                <script>function invertDirectionLong(direction)

  local direction = string.lower(direction)

  if direction == &quot;north&quot; or direction == &quot;n&quot; then
    return &quot;south&quot;
  elseif direction == &quot;northup&quot; or direction == &quot;nu&quot; then
    return &quot;southdown&quot;
  elseif direction == &quot;northdown&quot; or direction == &quot;nd&quot; then
    return &quot;southup&quot;
  elseif direction == &quot;northeast&quot; or direction == &quot;ne&quot; then
    return &quot;southwest&quot;
  elseif direction == &quot;northeastup&quot; or direction == &quot;neu&quot; then
    return &quot;southwestdown&quot;
  elseif direction == &quot;northeastdown&quot; or direction == &quot;ned&quot; then
    return &quot;southwestup&quot;
  elseif direction == &quot;east&quot; or direction == &quot;e&quot; then
    return &quot;west&quot;
  elseif direction == &quot;eastup&quot; or direction == &quot;eu&quot; then
    return &quot;westdown&quot;
  elseif direction == &quot;eastdown&quot; or direction == &quot;ed&quot; then
    return &quot;westup&quot;
  elseif direction == &quot;southeast&quot; or direction == &quot;se&quot; then
    return &quot;northwest&quot;
  elseif direction == &quot;southeastup&quot; or direction == &quot;seu&quot; then
    return &quot;northwestdown&quot;
  elseif direction == &quot;southeastdown&quot; or direction == &quot;sed&quot; then
    return &quot;northwestup&quot;
  elseif direction == &quot;south&quot; or direction == &quot;s&quot; then
    return &quot;north&quot;
  elseif direction == &quot;southup&quot; or direction == &quot;su&quot; then
    return &quot;northdown&quot;
  elseif direction == &quot;southdown&quot; or direction == &quot;sd&quot; then
    return &quot;northup&quot;
  elseif direction == &quot;southwest&quot; or direction == &quot;sw&quot; then
    return &quot;northeast&quot;
  elseif direction == &quot;southwestup&quot; or direction == &quot;swu&quot; then
    return &quot;northeastdown&quot;
  elseif direction == &quot;southwestdown&quot; or direction == &quot;swd&quot; then
    return &quot;northeastup&quot;
  elseif direction == &quot;west&quot; or direction == &quot;w&quot; then
    return &quot;east&quot;
  elseif direction == &quot;westup&quot; or direction == &quot;wu&quot; then
    return &quot;eastdown&quot;
  elseif direction == &quot;westdown&quot; or direction == &quot;wd&quot; then
    return &quot;eastup&quot;
  elseif direction == &quot;northwest&quot; or direction == &quot;nw&quot; then
    return &quot;southeast&quot;
  elseif direction == &quot;northwestup&quot; or direction == &quot;nwu&quot; then
    return &quot;southeastdown&quot;
  elseif direction == &quot;northwestdown&quot; or direction == &quot;nwd&quot; then
    return &quot;southeastup&quot;
  elseif direction == &quot;up&quot; or direction == &quot;u&quot; then
    return &quot;down&quot;
  elseif direction == &quot;down&quot; or direction == &quot;d&quot; then
    return &quot;up&quot;
  elseif direction == &quot;in&quot; or direction == &quot;i&quot; then
    return &quot;out&quot;
  elseif direction == &quot;out&quot; or direction == &quot;o&quot; then
    return &quot;in&quot;
  else
    return -1
  end    

end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>invertDirectionShort</name>
                <packageName></packageName>
                <script>function invertDirectionShort(direction)

  local direction = string.lower(direction)

  if direction == &quot;north&quot; or direction == &quot;n&quot; then
    return &quot;s&quot;
  elseif direction == &quot;northup&quot; or direction == &quot;nu&quot; then
    return &quot;sd&quot;
  elseif direction == &quot;northdown&quot; or direction == &quot;nd&quot; then
    return &quot;su&quot;
  elseif direction == &quot;northeast&quot; or direction == &quot;ne&quot; then
    return &quot;sw&quot;
  elseif direction == &quot;northeastup&quot; or direction == &quot;neu&quot; then
    return &quot;swd&quot;
  elseif direction == &quot;northeastdown&quot; or direction == &quot;ned&quot; then
    return &quot;swu&quot;
  elseif direction == &quot;east&quot; or direction == &quot;e&quot; then
    return &quot;w&quot;
  elseif direction == &quot;eastup&quot; or direction == &quot;eu&quot; then
    return &quot;wd&quot;
  elseif direction == &quot;eastdown&quot; or direction == &quot;ed&quot; then
    return &quot;wu&quot;
  elseif direction == &quot;southeast&quot; or direction == &quot;se&quot; then
    return &quot;nw&quot;
  elseif direction == &quot;southeastup&quot; or direction == &quot;seu&quot; then
    return &quot;nwd&quot;
  elseif direction == &quot;southeastdown&quot; or direction == &quot;sed&quot; then
    return &quot;nwu&quot;
  elseif direction == &quot;south&quot; or direction == &quot;s&quot; then
    return &quot;n&quot;
  elseif direction == &quot;southup&quot; or direction == &quot;su&quot; then
    return &quot;nd&quot;
  elseif direction == &quot;southdown&quot; or direction == &quot;sd&quot; then
    return &quot;nu&quot;
  elseif direction == &quot;southwest&quot; or direction == &quot;sw&quot; then
    return &quot;ne&quot;
  elseif direction == &quot;southwestup&quot; or direction == &quot;swu&quot; then
    return &quot;ned&quot;
  elseif direction == &quot;southwestdown&quot; or direction == &quot;swd&quot; then
    return &quot;neu&quot;
  elseif direction == &quot;west&quot; or direction == &quot;w&quot; then
    return &quot;e&quot;
  elseif direction == &quot;westup&quot; or direction == &quot;wu&quot; then
    return &quot;ed&quot;
  elseif direction == &quot;westdown&quot; or direction == &quot;wd&quot; then
    return &quot;eu&quot;
  elseif direction == &quot;northwest&quot; or direction == &quot;nw&quot; then
    return &quot;se&quot;
  elseif direction == &quot;northwestup&quot; or direction == &quot;nwu&quot; then
    return &quot;sed&quot;
  elseif direction == &quot;northwestdown&quot; or direction == &quot;nwd&quot; then
    return &quot;seu&quot;
  elseif direction == &quot;up&quot; or direction == &quot;u&quot; then
    return &quot;d&quot;
  elseif direction == &quot;down&quot; or direction == &quot;d&quot; then
    return &quot;u&quot;
  elseif direction == &quot;in&quot; or direction == &quot;i&quot; then
    return &quot;out&quot;
  elseif direction == &quot;out&quot; or direction == &quot;o&quot; then
    return &quot;in&quot;
  else
    return -1
  end    

end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>loadPlayerData</name>
                <packageName></packageName>
                <script>function loadPlayerData()

  mapper = mapper or {}
  table.load(getMudletHomeDir()..&quot;/jgmap.lua&quot;, mapper)

end</script>
                <eventHandlerList>
                    <string>sysConnectionEvent</string>
                </eventHandlerList>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>savePlayerData</name>
                <packageName></packageName>
                <script>function savePlayerData()

  table.save(getMudletHomeDir()..&quot;/jgmap.lua&quot;, mapper)

end</script>
                <eventHandlerList>
                    <string>sysDisconnectionEvent</string>
                </eventHandlerList>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>setPositionViaMenu</name>
                <packageName></packageName>
                <script>function setPositionViaMenu(_, roomNumber)

  setMapPosition(roomNumber)

end</script>
                <eventHandlerList>
                    <string>sysManualLocationSetEvent</string>
                </eventHandlerList>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>setMapPosition</name>
                <packageName></packageName>
                <script>function setMapPosition(roomNumber)

  mapper.roomNumber = roomNumber
  mapper.area = getRoomArea(roomNumber)
  mapper.x, mapper.y, mapper.z = getRoomCoordinates(roomNumber)
  mapper.roomName = getRoomName(roomNumber)

  centerview(roomNumber)
  displayCoords()

end</script>
                <eventHandlerList/>
            </Script>
            <Script isActive="yes" isFolder="no">
                <name>displayCoords</name>
                <packageName></packageName>
                <script>function displayCoords()

  coordsConsole:clear() 
  echo(&quot;coordsConsole&quot;,&quot;Area &quot;..mapper.area..&quot;: &quot;..getRoomAreaName(mapper.area)..&quot;\n&quot;)
  echo(&quot;coordsConsole&quot;,mapper.x..&quot;, &quot;..mapper.y..&quot;, &quot;..mapper.z..&quot; (&quot;..mapper.roomNumber..&quot;)&quot;)

end</script>
                <eventHandlerList/>
            </Script>
        </ScriptGroup>
    </ScriptPackage>
    <KeyPackage/>
</MudletPackage>
